{"version":3,"sources":["apputil.js","App.js","serviceWorker.js","index.js"],"names":["sortData","data","sort","a","b","cases","App","slNo","keyNo","useState","countries","setCountries","useEffect","fetch","then","response","json","sortedData","getCountriesData","total","type","cases_list","map","cnt","length","reduce","result","number","active","todayCases","deaths","todayDeaths","critical","recovered","todayRecovered","tests","population","className","key","numeral","format","country","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAAaA,EAAW,SAACC,GAErB,OADgB,YAAOA,GACLC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,OAAS,EAAI,M,gBCkJ/CC,MA/If,WACE,IAAIC,EAAO,EACPC,EAAQ,EAFC,EAIqBC,mBAAS,IAJ9B,mBAINC,EAJM,KAIKC,EAJL,KAMbC,qBAAU,YACc,uCAAG,sBAAAT,EAAA,sEACjBU,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACb,GACL,IAAMgB,EAAajB,EAASC,GAC5BU,EAAaM,MALM,2CAAH,qDAStBC,KACC,IAEH,IAAMC,EAAQ,SAACC,GACb,GAAa,UAATA,EAAkB,CACpB,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIlB,SAEb,OAAOgB,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EACjG,GAAa,WAATP,EAAmB,CAC5B,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIK,UAEb,OAAOP,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EACjG,GAAa,eAATP,EAAuB,CAChC,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIM,cAEb,OAAOR,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EACjG,GAAa,WAATP,EAAmB,CAC5B,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIO,UAEb,OAAOT,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EACjG,GAAa,gBAATP,EAAwB,CACjC,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIQ,eAEb,OAAOV,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EACjG,GAAa,aAATP,EAAqB,CAC9B,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIS,YAEb,OAAOX,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EAEnG,GAAa,cAATP,EAAsB,CAC7B,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIU,aAEb,OAAOZ,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EAEnG,GAAa,mBAATP,EAA2B,CAClC,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIW,kBAEb,OAAOb,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EAEnG,GAAa,UAATP,EAAkB,CACzB,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIY,SAEb,OAAOd,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,EAEnG,GAAa,eAATP,EAAuB,CAC9B,IAAMC,EAAaX,EAAUY,KAAI,SAAAC,GAC/B,OAAOA,EAAIa,cAEb,OAAOf,GAAcA,EAAWG,OAAS,EAAIH,EAAWI,QAAO,SAACC,EAAQC,GAAT,OAAoBD,EAASC,KAAU,IAI1G,OACE,yBAAKU,UAAU,OACb,+BACE,wBAAIA,UAAU,gBAAgBC,IAAK9B,KACjC,wBAAI6B,UAAU,YAAd,KACA,wBAAIA,UAAU,eAAd,WACA,2CACA,4CACA,yCACA,4CACA,0CACA,wCACA,+CACA,6CACA,gDACA,6CACA,2CACA,4CACA,2CAGF,wBAAIA,UAAU,mBAAmBC,IAAK9B,KACpC,wBAAI6B,UAAU,aACd,wBAAIA,UAAU,eAAd,aACA,4BAAI,gCAASE,IAAQpB,EAAM,UAAUqB,OAAO,SAC5C,4BAAKD,IAAQpB,EAAM,WAAWqB,OAAO,QACrC,4BAAKD,IAAQpB,EAAM,eAAeqB,OAAO,QACzC,4BAAKD,IAAQpB,EAAM,WAAWqB,OAAO,QACrC,4BAAKD,IAAQpB,EAAM,gBAAgBqB,OAAO,QAC1C,4BAAKD,IAAQpB,EAAM,aAAaqB,OAAO,QACvC,4BAAKD,IAAQpB,EAAM,cAAcqB,OAAO,QACxC,4BAAKD,IAAQpB,EAAM,mBAAmBqB,OAAO,QAC7C,mCACA,mCACA,4BAAKD,IAAQpB,EAAM,UAAUqB,OAAO,QACpC,mCACA,4BAAKD,IAAQpB,EAAM,eAAeqB,OAAO,SAIzC9B,EAAUY,KAAI,gBAAGmB,EAAH,EAAGA,QAASpC,EAAZ,EAAYA,MAAOuB,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,WAAYC,EAAvC,EAAuCA,OAAQC,EAA/C,EAA+CA,YAAaC,EAA5D,EAA4DA,SAAUC,EAAtE,EAAsEA,UAAWC,EAAjF,EAAiFA,eAAgBQ,EAAjG,EAAiGA,mBAAoBC,EAArH,EAAqHA,oBAAqBR,EAA1I,EAA0IA,MAAOS,EAAjJ,EAAiJA,mBAAoBR,EAArK,EAAqKA,WAArK,OAEV,wBAAIE,IAAK9B,KACP,wBAAI6B,UAAU,YAAY9B,KAC1B,wBAAI8B,UAAU,eAAeI,GAC7B,wBAAIJ,UAAU,eAAc,gCAASE,IAAQlC,GAAOmC,OAAO,SAC3D,wBAAIH,UAAU,eAAeE,IAAQX,GAAQY,OAAO,QACpD,wBAAIH,UAAU,eAAeE,IAAQV,GAAYW,OAAO,QACxD,wBAAIH,UAAU,eAAeE,IAAQT,GAAQU,OAAO,QACpD,wBAAIH,UAAU,eAAeE,IAAQP,GAAUQ,OAAO,QACtD,wBAAIH,UAAU,eAAeE,IAAQR,GAAaS,OAAO,QACzD,wBAAIH,UAAU,eAAeE,IAAQN,GAAWO,OAAO,QACvD,wBAAIH,UAAU,eAAeE,IAAQL,GAAgBM,OAAO,QAC5D,wBAAIH,UAAU,eAAeE,IAAQG,GAAoBF,OAAO,QAChE,wBAAIH,UAAU,eAAeE,IAAQI,GAAqBH,OAAO,QACjE,wBAAIH,UAAU,eAAeE,IAAQJ,GAAOK,OAAO,QACnD,wBAAIH,UAAU,eAAeE,IAAQK,GAAoBJ,OAAO,QAChE,wBAAIH,UAAU,eAAeE,IAAQH,GAAYI,OAAO,eC/HpDK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9df7655.chunk.js","sourcesContent":["export const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { sortData } from './apputil';\nimport numeral from \"numeral\";\n\nfunction App() {\n  let slNo = 1;\n  let keyNo = 0;\n\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const sortedData = sortData(data);\n          setCountries(sortedData);\n        })\n    };\n\n    getCountriesData();\n  }, [])\n\n  const total = (type) => {\n    if (type === \"cases\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.cases;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    } else if (type === \"active\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.active;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    } else if (type === \"todayCases\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.todayCases;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    } else if (type === \"deaths\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.deaths;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    } else if (type === \"todayDeaths\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.todayDeaths;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    } else if (type === \"critical\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.critical;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    }\n    else if (type === \"recovered\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.recovered;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    }\n    else if (type === \"todayRecovered\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.todayRecovered;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    }\n    else if (type === \"tests\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.tests;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    }\n    else if (type === \"population\") {\n      const cases_list = countries.map(cnt => {\n        return cnt.population;\n      });\n      return cases_list && cases_list.length > 0 ? cases_list.reduce((result, number) => result + number) : 0;\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <table>\n        <tr className=\"table__header\" key={keyNo++}>\n          <td className=\"th__SLNO\">#</td>\n          <td className=\"th__country\">Country</td>\n          <td>Total cases</td>\n          <td>Active cases</td>\n          <td>New cases</td>\n          <td>Total deaths</td>\n          <td>New deaths</td>\n          <td>Critical</td>\n          <td>Total recovered</td>\n          <td>New recovered</td>\n          <td>Tot cases/1M pop</td>\n          <td>Deaths/1M pop</td>\n          <td>Total tests</td>\n          <td>Tests/1M pop</td>\n          <td>Population</td>\n        </tr>\n\n        <tr className=\"table__worldwide\" key={keyNo++}>\n          <td className=\"td__SLNO\"></td>\n          <td className=\"td__country\">Worldwide</td>\n          <td><strong>{numeral(total(\"cases\")).format('0,0')}</strong></td>\n          <td>{numeral(total(\"active\")).format('0,0')}</td>\n          <td>{numeral(total(\"todayCases\")).format('0,0')}</td>\n          <td>{numeral(total(\"deaths\")).format('0,0')}</td>\n          <td>{numeral(total(\"todayDeaths\")).format('0,0')}</td>\n          <td>{numeral(total(\"critical\")).format('0,0')}</td>\n          <td>{numeral(total(\"recovered\")).format('0,0')}</td>\n          <td>{numeral(total(\"todayRecovered\")).format('0,0')}</td>\n          <td>---</td>\n          <td>---</td>\n          <td>{numeral(total(\"tests\")).format('0,0')}</td>\n          <td>---</td>\n          <td>{numeral(total(\"population\")).format('0,0')}</td>\n        </tr>\n\n        {\n          countries.map(({ country, cases, active, todayCases, deaths, todayDeaths, critical, recovered, todayRecovered, casesPerOneMillion, deathsPerOneMillion, tests, testsPerOneMillion, population }) =>\n            (\n              <tr key={keyNo++}>\n                <td className=\"td__SLNO\">{slNo++}</td>\n                <td className=\"td__country\">{country}</td>\n                <td className=\"td__numeric\"><strong>{numeral(cases).format('0,0')}</strong></td>\n                <td className=\"td__numeric\">{numeral(active).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(todayCases).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(deaths).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(critical).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(todayDeaths).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(recovered).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(todayRecovered).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(casesPerOneMillion).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(deathsPerOneMillion).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(tests).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(testsPerOneMillion).format('0,0')}</td>\n                <td className=\"td__numeric\">{numeral(population).format('0,0')}</td>\n              </tr>\n            ))\n        }\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}